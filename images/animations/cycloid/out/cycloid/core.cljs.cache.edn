{:rename-macros {}, :renames {}, :externs {window {Infinity {}}}, :use-macros {}, :excludes #{}, :name cycloid.core, :imports nil, :requires {q quil.core, quil.core quil.core, m quil.middleware, quil.middleware quil.middleware, goog.string.format goog.string.format}, :uses nil, :defs {linspace {:protocol-inline nil, :meta {:file "/home/halvards/Projects/clojureScript/cycloid/src/cycloid/core.cljs", :line 6, :column 8, :end-line 6, :end-column 16, :arglists (quote ([start stop num]))}, :name cycloid.core/linspace, :variadic false, :file "src/cycloid/core.cljs", :end-column 16, :method-params ([start stop num]), :protocol-impl nil, :arglists-meta (nil nil), :column 2, :line 6, :end-line 6, :max-fixed-arity 3, :fn-var true, :arglists (quote ([start stop num]))}, inc-if {:protocol-inline nil, :meta {:file "/home/halvards/Projects/clojureScript/cycloid/src/cycloid/core.cljs", :line 14, :column 7, :end-line 14, :end-column 13, :arglists (quote ([v bool]))}, :name cycloid.core/inc-if, :variadic false, :file "src/cycloid/core.cljs", :end-column 13, :method-params ([v bool]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v bool]))}, update-state {:protocol-inline nil, :meta {:file "/home/halvards/Projects/clojureScript/cycloid/src/cycloid/core.cljs", :line 19, :column 7, :end-line 19, :end-column 19, :arglists (quote ([state]))}, :name cycloid.core/update-state, :variadic false, :file "src/cycloid/core.cljs", :end-column 19, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, draw-state {:protocol-inline nil, :meta {:file "/home/halvards/Projects/clojureScript/cycloid/src/cycloid/core.cljs", :line 25, :column 7, :end-line 25, :end-column 17, :arglists (quote ([state]))}, :name cycloid.core/draw-state, :variadic false, :file "src/cycloid/core.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, setup {:protocol-inline nil, :meta {:file "/home/halvards/Projects/clojureScript/cycloid/src/cycloid/core.cljs", :line 45, :column 7, :end-line 45, :end-column 12, :arglists (quote ([]))}, :name cycloid.core/setup, :variadic false, :file "src/cycloid/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, mouse-click {:protocol-inline nil, :meta {:file "/home/halvards/Projects/clojureScript/cycloid/src/cycloid/core.cljs", :line 64, :column 7, :end-line 64, :end-column 18, :arglists (quote ([state event]))}, :name cycloid.core/mouse-click, :variadic false, :file "src/cycloid/core.cljs", :end-column 18, :method-params ([state event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state event]))}, button-choices {:name cycloid.core/button-choices, :file "src/cycloid/core.cljs", :line 71, :column 1, :end-line 71, :end-column 20, :meta {:file "/home/halvards/Projects/clojureScript/cycloid/src/cycloid/core.cljs", :line 71, :column 6, :end-line 71, :end-column 20}, :tag cljs.core/IMap}, key-pressed {:protocol-inline nil, :meta {:file "/home/halvards/Projects/clojureScript/cycloid/src/cycloid/core.cljs", :line 86, :column 7, :end-line 86, :end-column 18, :arglists (quote ([state event]))}, :name cycloid.core/key-pressed, :variadic false, :file "src/cycloid/core.cljs", :end-column 18, :method-params ([state event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state event]))}, cycloid {:protocol-inline nil, :meta {:file "/home/halvards/Projects/clojureScript/cycloid/src/cycloid/core.cljs", :line 94, :column 14, :end-line 94, :end-column 21, :export true, :arglists (quote ([]))}, :name cycloid.core/cycloid, :variadic false, :file "src/cycloid/core.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:q :hsb :down :r :fn :frame :key :n :mode :lines :update :points :point-count :e :up :size :1 :setup :mouse-pressed :middleware :play? :host :key-pressed :2 :host-id :no-start :d :x :3 :draw :p :i :a :triangles}, :order [:frame :play? :i :point-count :mode :r :hsb :points :q :down :n :e :up :1 :2 :d :x :3 :p :a :lines :triangles :key :host :update :size :setup :mouse-pressed :middleware :key-pressed :draw :no-start :fn :host-id]}, :doc nil}