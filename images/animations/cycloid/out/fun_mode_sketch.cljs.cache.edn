{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{update}, :name fun-mode-sketch, :imports nil, :requires {q quil.core, quil.core quil.core, m quil.middleware, quil.middleware quil.middleware}, :uses nil, :defs {min-r {:name fun-mode-sketch/min-r, :file "src/cycloid/core.cljs", :line 5, :column 1, :end-line 5, :end-column 11, :meta {:file "/home/halvards/Projects/clojureScript/cycloid/src/cycloid/core.cljs", :line 5, :column 6, :end-line 5, :end-column 11}, :tag number}, setup {:protocol-inline nil, :meta {:file "/home/halvards/Projects/clojureScript/cycloid/src/cycloid/core.cljs", :line 7, :column 7, :end-line 7, :end-column 12, :arglists (quote ([]))}, :name fun-mode-sketch/setup, :variadic false, :file "src/cycloid/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, update {:protocol-inline nil, :meta {:file "/home/halvards/Projects/clojureScript/cycloid/src/cycloid/core.cljs", :line 11, :column 7, :end-line 11, :end-column 13, :arglists (quote ([state]))}, :name fun-mode-sketch/update, :variadic false, :file "src/cycloid/core.cljs", :end-column 13, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, draw {:protocol-inline nil, :meta {:file "/home/halvards/Projects/clojureScript/cycloid/src/cycloid/core.cljs", :line 15, :column 7, :end-line 15, :end-column 11, :arglists (quote ([state]))}, :name fun-mode-sketch/draw, :variadic false, :file "src/cycloid/core.cljs", :end-column 11, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, shrink {:protocol-inline nil, :meta {:file "/home/halvards/Projects/clojureScript/cycloid/src/cycloid/core.cljs", :line 20, :column 7, :end-line 20, :end-column 13, :arglists (quote ([r]))}, :name fun-mode-sketch/shrink, :variadic false, :file "src/cycloid/core.cljs", :end-column 13, :method-params ([r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([r]))}, mouse-moved {:protocol-inline nil, :meta {:file "/home/halvards/Projects/clojureScript/cycloid/src/cycloid/core.cljs", :line 23, :column 7, :end-line 23, :end-column 18, :arglists (quote ([state event]))}, :name fun-mode-sketch/mouse-moved, :variadic false, :file "src/cycloid/core.cljs", :end-column 18, :method-params ([state event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state event]))}, example {:protocol-inline nil, :meta {:file "/home/halvards/Projects/clojureScript/cycloid/src/cycloid/core.cljs", :line 30, :column 14, :end-line 30, :end-column 21, :export true, :arglists (quote ([]))}, :name fun-mode-sketch/example, :variadic false, :file "src/cycloid/core.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:y :r :fn :mouse-moved :update :size :setup :middleware :host :host-id :no-start :x :draw}, :order [:x :y :r :host :mouse-moved :update :size :setup :middleware :draw :no-start :fn :host-id]}, :doc nil}