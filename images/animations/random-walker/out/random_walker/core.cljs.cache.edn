;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name random-walker.core, :imports nil, :requires {q quil.core, quil.core quil.core, m quil.middleware, quil.middleware quil.middleware}, :uses nil, :defs {draw-border {:protocol-inline nil, :meta {:file "/home/halvards/Projects/cljs/random-walker/src/random_walker/core.cljs", :line 53, :column 7, :end-line 53, :end-column 18, :arglists (quote ([state]))}, :name random-walker.core/draw-border, :variadic false, :file "src/random_walker/core.cljs", :end-column 18, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, draw-state {:protocol-inline nil, :meta {:file "/home/halvards/Projects/cljs/random-walker/src/random_walker/core.cljs", :line 66, :column 7, :end-line 66, :end-column 17, :arglists (quote ([state]))}, :name random-walker.core/draw-state, :variadic false, :file "src/random_walker/core.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, step {:name random-walker.core/step, :file "src/random_walker/core.cljs", :line 7, :column 1, :end-line 7, :end-column 10, :meta {:file "/home/halvards/Projects/cljs/random-walker/src/random_walker/core.cljs", :line 7, :column 6, :end-line 7, :end-column 10}}, update-state {:protocol-inline nil, :meta {:file "/home/halvards/Projects/cljs/random-walker/src/random_walker/core.cljs", :line 39, :column 7, :end-line 39, :end-column 19, :arglists (quote ([state]))}, :name random-walker.core/update-state, :variadic false, :file "src/random_walker/core.cljs", :end-column 19, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, height {:name random-walker.core/height, :file "src/random_walker/core.cljs", :line 6, :column 1, :end-line 6, :end-column 12, :meta {:file "/home/halvards/Projects/cljs/random-walker/src/random_walker/core.cljs", :line 6, :column 6, :end-line 6, :end-column 12}}, legal-y? {:protocol-inline nil, :meta {:file "/home/halvards/Projects/cljs/random-walker/src/random_walker/core.cljs", :line 14, :column 7, :end-line 14, :end-column 15, :arglists (quote ([y]))}, :name random-walker.core/legal-y?, :variadic false, :file "src/random_walker/core.cljs", :end-column 15, :method-params ([y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([y]))}, draw-char {:protocol-inline nil, :meta {:file "/home/halvards/Projects/cljs/random-walker/src/random_walker/core.cljs", :line 46, :column 7, :end-line 46, :end-column 16, :arglists (quote ([state]))}, :name random-walker.core/draw-char, :variadic false, :file "src/random_walker/core.cljs", :end-column 16, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, update-vel {:protocol-inline nil, :meta {:file "/home/halvards/Projects/cljs/random-walker/src/random_walker/core.cljs", :line 30, :column 7, :end-line 30, :end-column 17, :arglists (quote ([vel]))}, :name random-walker.core/update-vel, :variadic false, :file "src/random_walker/core.cljs", :end-column 17, :method-params ([vel]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([vel]))}, update-pos {:protocol-inline nil, :meta {:file "/home/halvards/Projects/cljs/random-walker/src/random_walker/core.cljs", :line 24, :column 7, :end-line 24, :end-column 17, :arglists (quote ([pos vel speed]))}, :name random-walker.core/update-pos, :variadic false, :file "src/random_walker/core.cljs", :end-column 17, :method-params ([pos vel speed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 3, :fn-var true, :arglists (quote ([pos vel speed]))}, width {:name random-walker.core/width, :file "src/random_walker/core.cljs", :line 5, :column 1, :end-line 5, :end-column 11, :meta {:file "/home/halvards/Projects/cljs/random-walker/src/random_walker/core.cljs", :line 5, :column 6, :end-line 5, :end-column 11}}, init-state {:name random-walker.core/init-state, :file "src/random_walker/core.cljs", :line 75, :column 1, :end-line 75, :end-column 16, :meta {:file "/home/halvards/Projects/cljs/random-walker/src/random_walker/core.cljs", :line 75, :column 6, :end-line 75, :end-column 16}}, legal-pos? {:protocol-inline nil, :meta {:file "/home/halvards/Projects/cljs/random-walker/src/random_walker/core.cljs", :line 20, :column 7, :end-line 20, :end-column 17, :arglists (quote ([[x y]]))}, :name random-walker.core/legal-pos?, :variadic false, :file "src/random_walker/core.cljs", :end-column 17, :method-params ([p__7142]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[x y]]))}, random-walker {:protocol-inline nil, :meta {:file "/home/halvards/Projects/cljs/random-walker/src/random_walker/core.cljs", :line 88, :column 14, :end-line 88, :end-column 27, :export true, :arglists (quote ([]))}, :name random-walker.core/random-walker, :variadic false, :file "src/random_walker/core.cljs", :end-column 27, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, setup {:protocol-inline nil, :meta {:file "/home/halvards/Projects/cljs/random-walker/src/random_walker/core.cljs", :line 82, :column 7, :end-line 82, :end-column 12, :arglists (quote ([]))}, :name random-walker.core/setup, :variadic false, :file "src/random_walker/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, abs {:protocol-inline nil, :meta {:file "/home/halvards/Projects/cljs/random-walker/src/random_walker/core.cljs", :line 9, :column 7, :end-line 9, :end-column 10, :arglists (quote ([v]))}, :name random-walker.core/abs, :variadic false, :file "src/random_walker/core.cljs", :end-column 10, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, legal-x? {:protocol-inline nil, :meta {:file "/home/halvards/Projects/cljs/random-walker/src/random_walker/core.cljs", :line 17, :column 7, :end-line 17, :end-column 15, :arglists (quote ([x]))}, :name random-walker.core/legal-x?, :variadic false, :file "src/random_walker/core.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:pix-per-unit :fn :speed :pos :update :size :graphic :setup :middleware :play? :host :host-id :no-start :vel :draw :draw-points}, :order [:pos :vel :speed :pix-per-unit :draw-points :play? :graphic :host :update :size :setup :middleware :draw :no-start :fn :host-id]}, :doc nil}